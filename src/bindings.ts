/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function showAppWindow() {
    return invoke()<null>("show_app_window")
}

export function getMarkerFlags() {
    return invoke()<MarkerFlags>("get_marker_flags")
}

export function setMarkerFlags(markerFlags: MarkerFlags) {
    return invoke()<null>("set_marker_flags", { markerFlags })
}

export function getRecordingsPath() {
    return invoke()<string>("get_recordings_path")
}

export function getRecordingsSize() {
    return invoke()<number>("get_recordings_size")
}

export function getRecordingsList() {
    return invoke()<Recording[]>("get_recordings_list")
}

export function openRecordingsFolder() {
    return invoke()<null>("open_recordings_folder")
}

export function deleteVideo(videoId: string) {
    return invoke()<boolean>("delete_video", { videoId })
}

export function renameVideo(videoId: string, newVideoId: string) {
    return invoke()<boolean>("rename_video", { videoId,newVideoId })
}

export function getMetadata(videoId: string) {
    return invoke()<GameMetadata | null>("get_metadata", { videoId })
}

export function toggleFavorite(videoId: string) {
    return invoke()<boolean>("toggle_favorite", { videoId })
}

export type GameMetadata = { ingameTimeRecStartOffset: number; queue: Queue; player: Player; championName: string; stats: Stats; participantId: number; events: GameEvent[]; favorite: boolean }
export type BuildingType = { buildingType: "INHIBITOR_BUILDING"; lane_type: LaneType } | { buildingType: "TOWER_BUILDING"; lane_type: LaneType; tower_type: TowerType }
export type TowerType = "OUTER_TURRET" | "INNER_TURRET" | "BASE_TURRET" | "NEXUS_TURRET"
export type GameEvent = { ChampionKill: { timestamp: number; victim_id: number; killer_id: number; assisting_participant_ids: number[]; position: Position } } | { BuildingKill: { timestamp: number; team_id: Team; killer_id: number; building_type: BuildingType; assisting_participant_ids: number[] } } | { EliteMonsterKill: { timestamp: number; killer_id: number; monster_type: MonsterType; assisting_participant_ids: number[] } }
export type Queue = { id: number; name: string; description: string }
export type LaneType = "TOP_LANE" | "MID_LANE" | "BOT_LANE"
export type Stats = { kills: number; deaths: number; assists: number; largestMultiKill: number; neutralMinionsKilled: number; neutralMinionsKilledEnemyJungle: number; neutralMinionsKilledTeamJungle: number; totalMinionsKilled: number; visionScore: number; visionWardsBoughtInGame: number; wardsPlaced: number; wardsKilled: number; win: boolean }
export type MarkerFlags = { kill: boolean; death: boolean; assist: boolean; turret: boolean; inhibitor: boolean; dragon: boolean; herald: boolean; baron: boolean }
export type MonsterType = { monsterType: "HORDE" } | { monsterType: "RIFTHERALD" } | { monsterType: "BARON_NASHOR" } | { monsterType: "DRAGON"; monsterSubType: DragonType }
export type Player = { gameName: string; tagLine: string; summonerId?: number | null }
export type Team = "BLUE" | "RED"
export type Position = { x: number; y: number }
export type Recording = { video_id: string; metadata: GameMetadata | null }
export type DragonType = "FIRE_DRAGON" | "EARTH_DRAGON" | "WATER_DRAGON" | "AIR_DRAGON" | "HEXTECH_DRAGON" | "CHEMTECH_DRAGON" | "ELDER_DRAGON"
