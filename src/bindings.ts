
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getMarkerFlags() : Promise<MarkerFlags> {
    return await TAURI_INVOKE("get_marker_flags");
},
async setMarkerFlags(markerFlags: MarkerFlags) : Promise<void> {
    await TAURI_INVOKE("set_marker_flags", { markerFlags });
},
async getRecordingsPath() : Promise<string> {
    return await TAURI_INVOKE("get_recordings_path");
},
async getRecordingsSize() : Promise<number> {
    return await TAURI_INVOKE("get_recordings_size");
},
async getRecordingsList() : Promise<Recording[]> {
    return await TAURI_INVOKE("get_recordings_list");
},
async openRecordingsFolder() : Promise<void> {
    await TAURI_INVOKE("open_recordings_folder");
},
async deleteVideo(videoId: string) : Promise<boolean> {
    return await TAURI_INVOKE("delete_video", { videoId });
},
async renameVideo(videoId: string, newVideoId: string) : Promise<boolean> {
    return await TAURI_INVOKE("rename_video", { videoId, newVideoId });
},
async getMetadata(videoId: string) : Promise<MetadataFile | null> {
    return await TAURI_INVOKE("get_metadata", { videoId });
},
async toggleFavorite(videoId: string) : Promise<boolean | null> {
    return await TAURI_INVOKE("toggle_favorite", { videoId });
}
}

/** user-defined events **/


export const events = __makeEvents__<{
appEvent: AppEvent
}>({
appEvent: "app-event"
})

/** user-defined constants **/



/** user-defined types **/

export type AppEvent = { type: "RecordingsChanged"; payload: null } | { type: "MetadataChanged"; payload: string[] } | { type: "MarkerflagsChanged"; payload: null }
export type BuildingType = { buildingType: "INHIBITOR_BUILDING"; lane_type: LaneType } | { buildingType: "TOWER_BUILDING"; lane_type: LaneType; tower_type: TowerType }
export type Deferred = { matchId: MatchId; ingameTimeRecStartOffset: number; favorite: boolean }
export type DragonType = "FIRE_DRAGON" | "EARTH_DRAGON" | "WATER_DRAGON" | "AIR_DRAGON" | "HEXTECH_DRAGON" | "CHEMTECH_DRAGON" | "ELDER_DRAGON"
export type GameEvent = ({ ChampionKill: { victim_id: number; killer_id: number; assisting_participant_ids: number[]; position: Position } } | { BuildingKill: { team_id: Team; killer_id: number; building_type: BuildingType; assisting_participant_ids: number[] } } | { EliteMonsterKill: { killer_id: number; monster_type: MonsterType; assisting_participant_ids: number[] } }) & { timestamp: number }
export type GameMetadata = { matchId: MatchId; ingameTimeRecStartOffset: number; queue: Queue; player: Player; championName: string; stats: Stats; participantId: number; events: GameEvent[]; favorite: boolean }
export type LaneType = "TOP_LANE" | "MID_LANE" | "BOT_LANE"
export type MarkerFlags = { kill: boolean; death: boolean; assist: boolean; turret: boolean; inhibitor: boolean; dragon: boolean; herald: boolean; baron: boolean }
export type MatchId = { gameId: number; platformId: string }
export type MetadataFile = { Metadata: GameMetadata } | { Deferred: Deferred } | { NoData: NoData }
export type MonsterType = { monsterType: "HORDE" } | { monsterType: "RIFTHERALD" } | { monsterType: "BARON_NASHOR" } | { monsterType: "DRAGON"; monsterSubType: DragonType }
export type NoData = { favorite: boolean }
export type Player = { gameName: string; tagLine: string; summonerId?: number | null }
export type Position = { x: number; y: number }
export type Queue = { id: number; name: string; isRanked: boolean }
export type Recording = { videoId: string; metadata: MetadataFile | null }
export type Stats = { kills: number; deaths: number; assists: number; largestMultiKill: number; neutralMinionsKilled: number; neutralMinionsKilledEnemyJungle: number; neutralMinionsKilledTeamJungle: number; totalMinionsKilled: number; visionScore: number; visionWardsBoughtInGame: number; wardsPlaced: number; wardsKilled: number; 
/**
 * remake
 * if this field is true `win` has to be ignored because the team that had to remake counts as the loser of the game
 * surrenders pre minute 20 count as a normal surrender (field `game_ended_in_surrender`)
 */
gameEndedInEarlySurrender: boolean; gameEndedInSurrender: boolean; win: boolean }
export type Team = "BLUE" | "RED"
export type TowerType = "OUTER_TURRET" | "INNER_TURRET" | "BASE_TURRET" | "NEXUS_TURRET"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: T extends null
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
