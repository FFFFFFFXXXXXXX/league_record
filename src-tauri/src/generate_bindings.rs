// split type and function TS definitions into seperate files
// types are in $projectRoot/league_record_types/index.d.ts
// function definitions are in $projectRoot/src/bindings.ts
#[test]
fn generate_type_bindings() {
    use specta::ts::{BigIntExportBehavior, ExportConfiguration};

    specta::export::ts_with_cfg(
        "../league_record_types/index.d.ts",
        &ExportConfiguration::new().bigint(BigIntExportBehavior::Number),
    )
    .unwrap();
}

#[test]
fn generate_function_bindings() {
    use crate::commands::*;

    const FILEPATH: &str = "../src/bindings.ts";
    const WARNING_HEADER: &str = "// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.";

    let (function_types, types) = specta::collect_types![
        get_marker_flags,
        set_marker_flags,
        get_recordings_path,
        get_recordings_size,
        get_recordings_list,
        open_recordings_folder,
        delete_video,
        rename_video,
        get_metadata,
        toggle_favorite
    ]
    .unwrap();

    let import_statement = format!(
        "import type {{ {}}} from \"@fffffffxxxxxxx/league_record_types\";",
        types
            .values()
            .filter_map(|v| v.as_ref())
            .fold(String::new(), |result, datatype| result + datatype.name + ", ")
    );

    let globals = tauri_specta::ts::internal::globals();

    let functions = tauri_specta::ts::internal::render_functions(
        function_types,
        &specta::ts::ExportConfiguration::new().bigint(specta::ts::BigIntExportBehavior::Number),
    )
    .unwrap();

    std::fs::write(
        FILEPATH,
        indoc::formatdoc! {
            r#"
                {WARNING_HEADER}

                {import_statement}

                {globals}

                {functions}
            "#
        },
    )
    .unwrap();
}
